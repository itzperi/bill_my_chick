-- COMPLETE PURCHASE FIX - PRODUCTION READY
-- This will fix the date column issue and ensure all required columns exist

-- Step 1: Create purchases table if it doesn't exist with all required columns
CREATE TABLE IF NOT EXISTS public.purchases (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    date date NOT NULL DEFAULT CURRENT_DATE,
    purchase_date date NOT NULL DEFAULT CURRENT_DATE,
    product_id bigint,
    supplier_id bigint,
    quantity_kg numeric(10,2),
    price_per_kg numeric(10,2),
    total_amount numeric(10,2) DEFAULT 0,
    paid_amount numeric(10,2) DEFAULT 0,
    balance_amount numeric(10,2) DEFAULT 0,
    amount numeric(10,2) DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Step 2: Add missing columns to existing purchases table
DO $$ 
BEGIN
    -- Add date column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'date' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN date date NOT NULL DEFAULT CURRENT_DATE;
    END IF;
    
    -- Add purchase_date if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'purchase_date' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN purchase_date date NOT NULL DEFAULT CURRENT_DATE;
    END IF;
    
    -- Add business_id if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'business_id' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN business_id text NOT NULL DEFAULT 'default';
    END IF;
    
    -- Add product_id if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'product_id' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN product_id bigint;
    END IF;
    
    -- Add supplier_id if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'supplier_id' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN supplier_id bigint;
    END IF;
    
    -- Add quantity_kg if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'quantity_kg' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN quantity_kg numeric(10,2);
    END IF;
    
    -- Add price_per_kg if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'price_per_kg' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN price_per_kg numeric(10,2);
    END IF;
    
    -- Add total_amount if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'total_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN total_amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add paid_amount if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'paid_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN paid_amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add balance_amount if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'balance_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN balance_amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add amount if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add created_at if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'created_at' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN created_at timestamptz DEFAULT now();
    END IF;
    
    -- Add updated_at if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
END $$;

-- Step 3: Make sure both date columns are properly set up
DO $$ 
BEGIN
    -- Ensure date column has proper default
    ALTER TABLE public.purchases ALTER COLUMN date SET DEFAULT CURRENT_DATE;
    
    -- Ensure purchase_date column has proper default
    ALTER TABLE public.purchases ALTER COLUMN purchase_date SET DEFAULT CURRENT_DATE;
    
    -- Make sure both columns are NOT NULL
    ALTER TABLE public.purchases ALTER COLUMN date SET NOT NULL;
    ALTER TABLE public.purchases ALTER COLUMN purchase_date SET NOT NULL;
END $$;

-- Step 4: Create supporting tables if they don't exist
CREATE TABLE IF NOT EXISTS public.products (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.suppliers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    UNIQUE (business_id, name)
);

-- Step 5: Enable Row Level Security
ALTER TABLE public.purchases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;

-- Step 6: Create RLS policies
DROP POLICY IF EXISTS purchases_select_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_insert_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_update_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_delete_policy ON public.purchases;

CREATE POLICY purchases_select_policy ON public.purchases FOR SELECT USING (true);
CREATE POLICY purchases_insert_policy ON public.purchases FOR INSERT WITH CHECK (true);
CREATE POLICY purchases_update_policy ON public.purchases FOR UPDATE USING (true);
CREATE POLICY purchases_delete_policy ON public.purchases FOR DELETE USING (true);

DROP POLICY IF EXISTS products_select_policy ON public.products;
DROP POLICY IF EXISTS products_insert_policy ON public.products;
DROP POLICY IF EXISTS products_update_policy ON public.products;
DROP POLICY IF EXISTS products_delete_policy ON public.products;

CREATE POLICY products_select_policy ON public.products FOR SELECT USING (true);
CREATE POLICY products_insert_policy ON public.products FOR INSERT WITH CHECK (true);
CREATE POLICY products_update_policy ON public.products FOR UPDATE USING (true);
CREATE POLICY products_delete_policy ON public.products FOR DELETE USING (true);

DROP POLICY IF EXISTS suppliers_select_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_insert_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_update_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_delete_policy ON public.suppliers;

CREATE POLICY suppliers_select_policy ON public.suppliers FOR SELECT USING (true);
CREATE POLICY suppliers_insert_policy ON public.suppliers FOR INSERT WITH CHECK (true);
CREATE POLICY suppliers_update_policy ON public.suppliers FOR UPDATE USING (true);
CREATE POLICY suppliers_delete_policy ON public.suppliers FOR DELETE USING (true);

-- Step 7: Grant permissions
GRANT ALL ON public.purchases TO anon;
GRANT ALL ON public.purchases TO authenticated;
GRANT ALL ON public.products TO anon;
GRANT ALL ON public.products TO authenticated;
GRANT ALL ON public.suppliers TO anon;
GRANT ALL ON public.suppliers TO authenticated;

GRANT USAGE ON SEQUENCE public.purchases_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.purchases_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.products_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.products_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO authenticated;

-- Step 8: Insert sample data
INSERT INTO public.products (business_id, name) 
VALUES 
    ('santhosh1', 'Chicken Live'),
    ('santhosh1', 'Chicken Cut'),
    ('santhosh1', 'Chicken Leg'),
    ('vasan', 'Chicken Live'),
    ('vasan', 'Chicken Cut')
ON CONFLICT DO NOTHING;

INSERT INTO public.suppliers (business_id, name) 
VALUES 
    ('santhosh1', 'Local Supplier 1'),
    ('santhosh1', 'Local Supplier 2'),
    ('vasan', 'Local Supplier 1'),
    ('vasan', 'Local Supplier 2')
ON CONFLICT DO NOTHING;

-- Step 9: Verify the fix
SELECT 'PURCHASE TABLE COMPLETELY FIXED' as status;
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'purchases' 
AND table_schema = 'public'
ORDER BY ordinal_position;
