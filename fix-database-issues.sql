-- Comprehensive Database Fix Script
-- This script addresses the salary table issue and ensures all required tables exist

-- 1. Create salaries table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.salaries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    salary_date date NOT NULL,
    amount numeric(10,2) NOT NULL CHECK (amount >= 0),
    employee_id text,
    notes text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT salaries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 2. Create load_entries table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.load_entries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    entry_date date NOT NULL,
    no_of_boxes integer NOT NULL CHECK (no_of_boxes >= 0),
    quantity_with_box numeric(10,2) NOT NULL CHECK (quantity_with_box >= 0),
    no_of_boxes_after integer NOT NULL CHECK (no_of_boxes_after >= 0),
    quantity_after_box numeric(10,2) NOT NULL CHECK (quantity_after_box >= 0),
    product_id bigint REFERENCES public.products(id) ON DELETE SET NULL,
    supplier_id bigint REFERENCES public.suppliers(id) ON DELETE SET NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT load_entries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 3. Create suppliers table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.suppliers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT suppliers_name_not_empty CHECK (length(trim(name)) > 0),
    CONSTRAINT suppliers_business_id_not_empty CHECK (length(trim(business_id)) > 0),
    UNIQUE (business_id, name)
);

-- 4. Create products table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.products (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT products_name_not_empty CHECK (length(trim(name)) > 0),
    CONSTRAINT products_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 5. Create inventory table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.inventory (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    chicken_stock_kg numeric(10,2) DEFAULT 0 CHECK (chicken_stock_kg >= 0),
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT inventory_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 6. Add missing columns to existing tables
DO $$ 
BEGIN
    -- Add employee_id and notes to salaries if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'salaries' AND column_name = 'employee_id' AND table_schema = 'public') THEN
        ALTER TABLE public.salaries ADD COLUMN employee_id text;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'salaries' AND column_name = 'notes' AND table_schema = 'public') THEN
        ALTER TABLE public.salaries ADD COLUMN notes text;
    END IF;
    
    -- Add updated_at to salaries if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'salaries' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.salaries ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    -- Add updated_at to products if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.products ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    -- Add updated_at to suppliers if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'suppliers' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.suppliers ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    -- Add updated_at to load_entries if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'load_entries' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.load_entries ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    -- Add updated_at to inventory if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'inventory' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.inventory ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
END $$;

-- 7. Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_salaries_business_date ON public.salaries (business_id, salary_date);
CREATE INDEX IF NOT EXISTS idx_salaries_employee ON public.salaries (employee_id);
CREATE INDEX IF NOT EXISTS idx_load_entries_business_date ON public.load_entries (business_id, entry_date);
CREATE INDEX IF NOT EXISTS idx_load_entries_product ON public.load_entries (product_id);
CREATE INDEX IF NOT EXISTS idx_load_entries_supplier ON public.load_entries (supplier_id);
CREATE INDEX IF NOT EXISTS idx_suppliers_business_name ON public.suppliers (business_id, name);
CREATE INDEX IF NOT EXISTS idx_products_business_name ON public.products (business_id, name);
CREATE INDEX IF NOT EXISTS idx_inventory_business ON public.inventory (business_id);

-- 8. Enable Row Level Security
ALTER TABLE public.salaries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.load_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventory ENABLE ROW LEVEL SECURITY;

-- 9. Create RLS policies
DO $$ BEGIN
    -- Salaries policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_select_policy') THEN
        CREATE POLICY salaries_select_policy ON public.salaries FOR SELECT USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_insert_policy') THEN
        CREATE POLICY salaries_insert_policy ON public.salaries FOR INSERT WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_update_policy') THEN
        CREATE POLICY salaries_update_policy ON public.salaries FOR UPDATE USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_delete_policy') THEN
        CREATE POLICY salaries_delete_policy ON public.salaries FOR DELETE USING (true);
    END IF;
    
    -- Load entries policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_select_policy') THEN
        CREATE POLICY load_entries_select_policy ON public.load_entries FOR SELECT USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_insert_policy') THEN
        CREATE POLICY load_entries_insert_policy ON public.load_entries FOR INSERT WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_update_policy') THEN
        CREATE POLICY load_entries_update_policy ON public.load_entries FOR UPDATE USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_delete_policy') THEN
        CREATE POLICY load_entries_delete_policy ON public.load_entries FOR DELETE USING (true);
    END IF;
    
    -- Suppliers policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_select_policy') THEN
        CREATE POLICY suppliers_select_policy ON public.suppliers FOR SELECT USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_insert_policy') THEN
        CREATE POLICY suppliers_insert_policy ON public.suppliers FOR INSERT WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_update_policy') THEN
        CREATE POLICY suppliers_update_policy ON public.suppliers FOR UPDATE USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_delete_policy') THEN
        CREATE POLICY suppliers_delete_policy ON public.suppliers FOR DELETE USING (true);
    END IF;
    
    -- Products policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'products' AND policyname = 'products_select_policy') THEN
        CREATE POLICY products_select_policy ON public.products FOR SELECT USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'products' AND policyname = 'products_insert_policy') THEN
        CREATE POLICY products_insert_policy ON public.products FOR INSERT WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'products' AND policyname = 'products_update_policy') THEN
        CREATE POLICY products_update_policy ON public.products FOR UPDATE USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'products' AND policyname = 'products_delete_policy') THEN
        CREATE POLICY products_delete_policy ON public.products FOR DELETE USING (true);
    END IF;
    
    -- Inventory policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_select_policy') THEN
        CREATE POLICY inventory_select_policy ON public.inventory FOR SELECT USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_insert_policy') THEN
        CREATE POLICY inventory_insert_policy ON public.inventory FOR INSERT WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_update_policy') THEN
        CREATE POLICY inventory_update_policy ON public.inventory FOR UPDATE USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_delete_policy') THEN
        CREATE POLICY inventory_delete_policy ON public.inventory FOR DELETE USING (true);
    END IF;
END $$;

-- 10. Create enhanced salary function
CREATE OR REPLACE FUNCTION public.safe_add_salary(
    p_business_id text,
    p_salary_date date,
    p_amount numeric,
    p_employee_id text DEFAULT NULL,
    p_notes text DEFAULT NULL
) RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
    v_salary_id bigint;
BEGIN
    -- Validate inputs
    IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
        RAISE EXCEPTION 'Business ID is required';
    END IF;
    
    IF p_salary_date IS NULL THEN
        RAISE EXCEPTION 'Salary date is required';
    END IF;
    
    IF p_amount IS NULL OR p_amount <= 0 THEN
        RAISE EXCEPTION 'Salary amount must be greater than 0';
    END IF;
    
    -- Insert salary entry
    INSERT INTO public.salaries (business_id, salary_date, amount, employee_id, notes)
    VALUES (p_business_id, p_salary_date, p_amount, p_employee_id, p_notes)
    RETURNING id INTO v_salary_id;
    
    RETURN v_salary_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to add salary: %', SQLERRM;
END;
$$;

-- 11. Create enhanced load entry function
CREATE OR REPLACE FUNCTION public.safe_add_load_entry(
    p_business_id text,
    p_entry_date date,
    p_no_of_boxes integer,
    p_quantity_with_box numeric,
    p_no_of_boxes_after integer,
    p_quantity_after_box numeric,
    p_product_id bigint DEFAULT NULL,
    p_supplier_id bigint DEFAULT NULL
) RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
    v_entry_id bigint;
BEGIN
    -- Validate inputs
    IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
        RAISE EXCEPTION 'Business ID is required';
    END IF;
    
    IF p_entry_date IS NULL THEN
        RAISE EXCEPTION 'Entry date is required';
    END IF;
    
    IF p_no_of_boxes IS NULL OR p_no_of_boxes < 0 THEN
        RAISE EXCEPTION 'Number of boxes must be non-negative';
    END IF;
    
    IF p_quantity_with_box IS NULL OR p_quantity_with_box < 0 THEN
        RAISE EXCEPTION 'Quantity with box must be non-negative';
    END IF;
    
    IF p_no_of_boxes_after IS NULL OR p_no_of_boxes_after < 0 THEN
        RAISE EXCEPTION 'Number of boxes after must be non-negative';
    END IF;
    
    IF p_quantity_after_box IS NULL OR p_quantity_after_box < 0 THEN
        RAISE EXCEPTION 'Quantity after box must be non-negative';
    END IF;
    
    -- Insert load entry
    INSERT INTO public.load_entries (
        business_id, entry_date, no_of_boxes, quantity_with_box,
        no_of_boxes_after, quantity_after_box, product_id, supplier_id
    )
    VALUES (
        p_business_id, p_entry_date, p_no_of_boxes, p_quantity_with_box,
        p_no_of_boxes_after, p_quantity_after_box, p_product_id, p_supplier_id
    )
    RETURNING id INTO v_entry_id;
    
    RETURN v_entry_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to add load entry: %', SQLERRM;
END;
$$;

-- 12. Create update triggers
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

-- Apply update triggers
DROP TRIGGER IF EXISTS trg_salaries_updated_at ON public.salaries;
CREATE TRIGGER trg_salaries_updated_at
    BEFORE UPDATE ON public.salaries
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_load_entries_updated_at ON public.load_entries;
CREATE TRIGGER trg_load_entries_updated_at
    BEFORE UPDATE ON public.load_entries
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_products_updated_at ON public.products;
CREATE TRIGGER trg_products_updated_at
    BEFORE UPDATE ON public.products
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_suppliers_updated_at ON public.suppliers;
CREATE TRIGGER trg_suppliers_updated_at
    BEFORE UPDATE ON public.suppliers
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_inventory_updated_at ON public.inventory;
CREATE TRIGGER trg_inventory_updated_at
    BEFORE UPDATE ON public.inventory
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- 13. Insert sample data for testing
INSERT INTO public.products (business_id, name) 
VALUES 
    ('santhosh1', 'Chicken Live'),
    ('santhosh1', 'Chicken Cut'),
    ('santhosh1', 'Chicken Leg'),
    ('santhosh1', 'Chicken Breast'),
    ('santhosh1', 'Chicken Wings'),
    ('vasan', 'Chicken Live'),
    ('vasan', 'Chicken Cut'),
    ('vasan', 'Chicken Leg'),
    ('vasan', 'Chicken Breast'),
    ('vasan', 'Chicken Wings')
ON CONFLICT DO NOTHING;

INSERT INTO public.suppliers (business_id, name) 
VALUES 
    ('santhosh1', 'Local Supplier 1'),
    ('santhosh1', 'Local Supplier 2'),
    ('vasan', 'Local Supplier 1'),
    ('vasan', 'Local Supplier 2')
ON CONFLICT DO NOTHING;

-- 14. Verify tables exist and show diagnostic
DO $$
DECLARE
    rec RECORD;
BEGIN
    RAISE NOTICE '=== DATABASE FIX COMPLETE ===';
    RAISE NOTICE 'Tables created/verified:';
    
    FOR rec IN 
        SELECT table_name, 
               CASE WHEN table_name IN ('salaries', 'load_entries', 'suppliers', 'products', 'inventory') 
                    THEN 'FIXED' 
                    ELSE 'EXISTS' 
               END as status
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('salaries', 'load_entries', 'suppliers', 'products', 'inventory')
    LOOP
        RAISE NOTICE 'Table: % | Status: %', rec.table_name, rec.status;
    END LOOP;
    
    RAISE NOTICE '=== READY TO USE ===';
END $$;
