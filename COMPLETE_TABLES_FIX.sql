-- COMPLETE TABLES FIX
-- This will create all missing tables and columns for the application

-- Step 1: Create products table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.products (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT products_name_not_empty CHECK (length(trim(name)) > 0),
    CONSTRAINT products_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- Step 2: Create suppliers table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.suppliers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT suppliers_name_not_empty CHECK (length(trim(name)) > 0),
    CONSTRAINT suppliers_business_id_not_empty CHECK (length(trim(business_id)) > 0),
    UNIQUE (business_id, name)
);

-- Step 3: Create purchases table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.purchases (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    purchase_date date NOT NULL,
    product_id bigint REFERENCES public.products(id) ON DELETE SET NULL,
    supplier_id bigint REFERENCES public.suppliers(id) ON DELETE SET NULL,
    quantity_kg numeric(10,2),
    price_per_kg numeric(10,2),
    total_amount numeric(10,2),
    paid_amount numeric(10,2) DEFAULT 0,
    balance_amount numeric(10,2) DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT purchases_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- Step 4: Create load_entries table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.load_entries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    entry_date date NOT NULL,
    no_of_boxes integer NOT NULL CHECK (no_of_boxes >= 0),
    quantity_with_box numeric(10,2) NOT NULL CHECK (quantity_with_box >= 0),
    no_of_boxes_after integer NOT NULL CHECK (no_of_boxes_after >= 0),
    quantity_after_box numeric(10,2) NOT NULL CHECK (quantity_after_box >= 0),
    product_id bigint REFERENCES public.products(id) ON DELETE SET NULL,
    supplier_id bigint REFERENCES public.suppliers(id) ON DELETE SET NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT load_entries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- Step 5: Create salaries table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.salaries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    salary_date date NOT NULL,
    amount numeric(10,2) NOT NULL CHECK (amount >= 0),
    employee_id text,
    notes text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT salaries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- Step 6: Add missing columns to existing tables
DO $$ 
BEGIN
    -- Add paid_amount to purchases if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'paid_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN paid_amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add balance_amount to purchases if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'balance_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN balance_amount numeric(10,2) DEFAULT 0;
    END IF;
    
    -- Add total_amount to purchases if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'total_amount' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN total_amount numeric(10,2);
    END IF;
    
    -- Add updated_at to all tables if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.products ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'suppliers' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.suppliers ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'purchases' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.purchases ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'load_entries' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.load_entries ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'salaries' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE public.salaries ADD COLUMN updated_at timestamptz DEFAULT now();
    END IF;
END $$;

-- Step 7: Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_products_business_name ON public.products (business_id, name);
CREATE INDEX IF NOT EXISTS idx_suppliers_business_name ON public.suppliers (business_id, name);
CREATE INDEX IF NOT EXISTS idx_purchases_business_date ON public.purchases (business_id, purchase_date);
CREATE INDEX IF NOT EXISTS idx_purchases_product ON public.purchases (product_id);
CREATE INDEX IF NOT EXISTS idx_purchases_supplier ON public.purchases (supplier_id);
CREATE INDEX IF NOT EXISTS idx_load_entries_business_date ON public.load_entries (business_id, entry_date);
CREATE INDEX IF NOT EXISTS idx_load_entries_product ON public.load_entries (product_id);
CREATE INDEX IF NOT EXISTS idx_load_entries_supplier ON public.load_entries (supplier_id);
CREATE INDEX IF NOT EXISTS idx_salaries_business_date ON public.salaries (business_id, salary_date);

-- Step 8: Enable Row Level Security
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.purchases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.load_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.salaries ENABLE ROW LEVEL SECURITY;

-- Step 9: Create RLS policies for all tables
-- Products policies
DROP POLICY IF EXISTS products_select_policy ON public.products;
DROP POLICY IF EXISTS products_insert_policy ON public.products;
DROP POLICY IF EXISTS products_update_policy ON public.products;
DROP POLICY IF EXISTS products_delete_policy ON public.products;

CREATE POLICY products_select_policy ON public.products FOR SELECT USING (true);
CREATE POLICY products_insert_policy ON public.products FOR INSERT WITH CHECK (true);
CREATE POLICY products_update_policy ON public.products FOR UPDATE USING (true);
CREATE POLICY products_delete_policy ON public.products FOR DELETE USING (true);

-- Suppliers policies
DROP POLICY IF EXISTS suppliers_select_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_insert_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_update_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_delete_policy ON public.suppliers;

CREATE POLICY suppliers_select_policy ON public.suppliers FOR SELECT USING (true);
CREATE POLICY suppliers_insert_policy ON public.suppliers FOR INSERT WITH CHECK (true);
CREATE POLICY suppliers_update_policy ON public.suppliers FOR UPDATE USING (true);
CREATE POLICY suppliers_delete_policy ON public.suppliers FOR DELETE USING (true);

-- Purchases policies
DROP POLICY IF EXISTS purchases_select_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_insert_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_update_policy ON public.purchases;
DROP POLICY IF EXISTS purchases_delete_policy ON public.purchases;

CREATE POLICY purchases_select_policy ON public.purchases FOR SELECT USING (true);
CREATE POLICY purchases_insert_policy ON public.purchases FOR INSERT WITH CHECK (true);
CREATE POLICY purchases_update_policy ON public.purchases FOR UPDATE USING (true);
CREATE POLICY purchases_delete_policy ON public.purchases FOR DELETE USING (true);

-- Load entries policies
DROP POLICY IF EXISTS load_entries_select_policy ON public.load_entries;
DROP POLICY IF EXISTS load_entries_insert_policy ON public.load_entries;
DROP POLICY IF EXISTS load_entries_update_policy ON public.load_entries;
DROP POLICY IF EXISTS load_entries_delete_policy ON public.load_entries;

CREATE POLICY load_entries_select_policy ON public.load_entries FOR SELECT USING (true);
CREATE POLICY load_entries_insert_policy ON public.load_entries FOR INSERT WITH CHECK (true);
CREATE POLICY load_entries_update_policy ON public.load_entries FOR UPDATE USING (true);
CREATE POLICY load_entries_delete_policy ON public.load_entries FOR DELETE USING (true);

-- Salaries policies
DROP POLICY IF EXISTS salaries_select_policy ON public.salaries;
DROP POLICY IF EXISTS salaries_insert_policy ON public.salaries;
DROP POLICY IF EXISTS salaries_update_policy ON public.salaries;
DROP POLICY IF EXISTS salaries_delete_policy ON public.salaries;

CREATE POLICY salaries_select_policy ON public.salaries FOR SELECT USING (true);
CREATE POLICY salaries_insert_policy ON public.salaries FOR INSERT WITH CHECK (true);
CREATE POLICY salaries_update_policy ON public.salaries FOR UPDATE USING (true);
CREATE POLICY salaries_delete_policy ON public.salaries FOR DELETE USING (true);

-- Step 10: Grant permissions
GRANT ALL ON public.products TO anon;
GRANT ALL ON public.products TO authenticated;
GRANT ALL ON public.suppliers TO anon;
GRANT ALL ON public.suppliers TO authenticated;
GRANT ALL ON public.purchases TO anon;
GRANT ALL ON public.purchases TO authenticated;
GRANT ALL ON public.load_entries TO anon;
GRANT ALL ON public.load_entries TO authenticated;
GRANT ALL ON public.salaries TO anon;
GRANT ALL ON public.salaries TO authenticated;

GRANT USAGE ON SEQUENCE public.products_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.products_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.purchases_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.purchases_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.load_entries_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.load_entries_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.salaries_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.salaries_id_seq TO authenticated;

-- Step 11: Create update triggers
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

-- Apply update triggers
DROP TRIGGER IF EXISTS trg_products_updated_at ON public.products;
CREATE TRIGGER trg_products_updated_at
    BEFORE UPDATE ON public.products
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_suppliers_updated_at ON public.suppliers;
CREATE TRIGGER trg_suppliers_updated_at
    BEFORE UPDATE ON public.suppliers
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_purchases_updated_at ON public.purchases;
CREATE TRIGGER trg_purchases_updated_at
    BEFORE UPDATE ON public.purchases
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_load_entries_updated_at ON public.load_entries;
CREATE TRIGGER trg_load_entries_updated_at
    BEFORE UPDATE ON public.load_entries
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_salaries_updated_at ON public.salaries;
CREATE TRIGGER trg_salaries_updated_at
    BEFORE UPDATE ON public.salaries
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- Step 12: Insert sample data
INSERT INTO public.products (business_id, name) 
VALUES 
    ('santhosh1', 'Chicken Live'),
    ('santhosh1', 'Chicken Cut'),
    ('santhosh1', 'Chicken Leg'),
    ('vasan', 'Chicken Live'),
    ('vasan', 'Chicken Cut')
ON CONFLICT DO NOTHING;

INSERT INTO public.suppliers (business_id, name) 
VALUES 
    ('santhosh1', 'Local Supplier 1'),
    ('santhosh1', 'Local Supplier 2'),
    ('vasan', 'Local Supplier 1'),
    ('vasan', 'Local Supplier 2')
ON CONFLICT DO NOTHING;

-- Step 13: Verify all tables exist
SELECT 'ALL TABLES CREATED SUCCESSFULLY' as status;
SELECT 
    'products' as table_name, 
    COUNT(*) as row_count 
FROM public.products
UNION ALL
SELECT 
    'suppliers' as table_name, 
    COUNT(*) as row_count 
FROM public.suppliers
UNION ALL
SELECT 
    'purchases' as table_name, 
    COUNT(*) as row_count 
FROM public.purchases
UNION ALL
SELECT 
    'load_entries' as table_name, 
    COUNT(*) as row_count 
FROM public.load_entries
UNION ALL
SELECT 
    'salaries' as table_name, 
    COUNT(*) as row_count 
FROM public.salaries;
