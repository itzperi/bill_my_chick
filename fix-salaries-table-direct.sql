-- DIRECT FIX FOR SALARIES TABLE ERROR
-- Run this SQL query in your Supabase SQL editor

-- Step 1: Drop the table if it exists (to ensure clean creation)
DROP TABLE IF EXISTS public.salaries CASCADE;

-- Step 2: Create the salaries table with all required columns
CREATE TABLE public.salaries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    salary_date date NOT NULL,
    amount numeric(10,2) NOT NULL CHECK (amount >= 0),
    employee_id text,
    notes text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT salaries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- Step 3: Create indexes for better performance
CREATE INDEX idx_salaries_business_date ON public.salaries (business_id, salary_date);
CREATE INDEX idx_salaries_employee ON public.salaries (employee_id);

-- Step 4: Enable Row Level Security
ALTER TABLE public.salaries ENABLE ROW LEVEL SECURITY;

-- Step 5: Create RLS policies (allow all operations for now)
CREATE POLICY IF NOT EXISTS salaries_select_policy ON public.salaries FOR SELECT USING (true);
CREATE POLICY IF NOT EXISTS salaries_insert_policy ON public.salaries FOR INSERT WITH CHECK (true);
CREATE POLICY IF NOT EXISTS salaries_update_policy ON public.salaries FOR UPDATE USING (true);
CREATE POLICY IF NOT EXISTS salaries_delete_policy ON public.salaries FOR DELETE USING (true);

-- Step 6: Create the safe_add_salary function
CREATE OR REPLACE FUNCTION public.safe_add_salary(
    p_business_id text,
    p_salary_date date,
    p_amount numeric,
    p_employee_id text DEFAULT NULL,
    p_notes text DEFAULT NULL
) RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
    v_salary_id bigint;
BEGIN
    -- Validate inputs
    IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
        RAISE EXCEPTION 'Business ID is required';
    END IF;
    
    IF p_salary_date IS NULL THEN
        RAISE EXCEPTION 'Salary date is required';
    END IF;
    
    IF p_amount IS NULL OR p_amount <= 0 THEN
        RAISE EXCEPTION 'Salary amount must be greater than 0';
    END IF;
    
    -- Insert salary entry
    INSERT INTO public.salaries (business_id, salary_date, amount, employee_id, notes)
    VALUES (p_business_id, p_salary_date, p_amount, p_employee_id, p_notes)
    RETURNING id INTO v_salary_id;
    
    RETURN v_salary_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to add salary: %', SQLERRM;
END;
$$;

-- Step 7: Create update trigger
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

CREATE TRIGGER trg_salaries_updated_at
    BEFORE UPDATE ON public.salaries
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- Step 8: Insert test data to verify
INSERT INTO public.salaries (business_id, salary_date, amount, employee_id, notes) 
VALUES 
    ('santhosh1', '2024-01-15', 5000.00, 'EMP001', 'Test salary entry'),
    ('vasan', '2024-01-15', 4500.00, 'EMP002', 'Test salary entry')
ON CONFLICT DO NOTHING;

-- Step 9: Verify the table exists and has data
SELECT 'SALARIES TABLE CREATED SUCCESSFULLY' as status;
SELECT COUNT(*) as total_salaries FROM public.salaries;
SELECT * FROM public.salaries LIMIT 3;
