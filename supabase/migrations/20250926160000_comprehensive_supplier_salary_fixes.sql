-- Comprehensive fixes for supplier handling, salary entry, and load page issues

-- 1) Ensure suppliers table exists with proper structure
CREATE TABLE IF NOT EXISTS public.suppliers (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  business_id text NOT NULL,
  name text NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT suppliers_name_not_empty CHECK (length(trim(name)) > 0),
  CONSTRAINT suppliers_business_id_not_empty CHECK (length(trim(business_id)) > 0),
  UNIQUE (business_id, name)
);

-- 2) Ensure salaries table exists with proper structure
CREATE TABLE IF NOT EXISTS public.salaries (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  business_id text NOT NULL,
  salary_date date NOT NULL,
  amount numeric(10,2) NOT NULL CHECK (amount >= 0),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT salaries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 3) Ensure load_entries table exists with proper structure
CREATE TABLE IF NOT EXISTS public.load_entries (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  business_id text NOT NULL,
  entry_date date NOT NULL,
  no_of_boxes integer NOT NULL CHECK (no_of_boxes >= 0),
  quantity_with_box numeric(10,2) NOT NULL CHECK (quantity_with_box >= 0),
  no_of_boxes_after integer NOT NULL CHECK (no_of_boxes_after >= 0),
  quantity_after_box numeric(10,2) NOT NULL CHECK (quantity_after_box >= 0),
  product_id bigint REFERENCES public.products(id) ON DELETE SET NULL,
  supplier_id bigint REFERENCES public.suppliers(id) ON DELETE SET NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT load_entries_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 4) Ensure inventory table exists
CREATE TABLE IF NOT EXISTS public.inventory (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  business_id text NOT NULL,
  chicken_stock_kg numeric(10,2) DEFAULT 0 CHECK (chicken_stock_kg >= 0),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT inventory_business_id_not_empty CHECK (length(trim(business_id)) > 0)
);

-- 5) Enhanced supplier management functions
CREATE OR REPLACE FUNCTION public.get_or_create_supplier(
  p_business_id text,
  p_supplier_name text
) RETURNS TABLE (
  supplier_id bigint,
  supplier_name text,
  is_new boolean
)
LANGUAGE plpgsql
AS $$
DECLARE
  v_supplier_id bigint;
  v_supplier_name text;
  v_is_new boolean := false;
BEGIN
  -- Validate inputs
  IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
    RAISE EXCEPTION 'Business ID is required';
  END IF;
  
  IF p_supplier_name IS NULL OR trim(p_supplier_name) = '' THEN
    RAISE EXCEPTION 'Supplier name is required';
  END IF;
  
  -- Clean supplier name
  v_supplier_name := trim(p_supplier_name);
  
  -- Try to find existing supplier
  SELECT id, name INTO v_supplier_id, v_supplier_name
  FROM public.suppliers
  WHERE business_id = p_business_id 
    AND LOWER(name) = LOWER(v_supplier_name)
  LIMIT 1;
  
  -- If found, return existing supplier
  IF v_supplier_id IS NOT NULL THEN
    RETURN QUERY SELECT v_supplier_id, v_supplier_name, false;
    RETURN;
  END IF;
  
  -- Create new supplier
  BEGIN
    INSERT INTO public.suppliers (business_id, name)
    VALUES (p_business_id, v_supplier_name)
    RETURNING id, name INTO v_supplier_id, v_supplier_name;
    
    v_is_new := true;
    RETURN QUERY SELECT v_supplier_id, v_supplier_name, v_is_new;
  EXCEPTION
    WHEN unique_violation THEN
      -- Supplier was created by another process, fetch the existing one
      SELECT id, name INTO v_supplier_id, v_supplier_name
      FROM public.suppliers
      WHERE business_id = p_business_id 
        AND LOWER(name) = LOWER(v_supplier_name)
      LIMIT 1;
      
      IF v_supplier_id IS NOT NULL THEN
        RETURN QUERY SELECT v_supplier_id, v_supplier_name, false;
      ELSE
        RAISE EXCEPTION 'Failed to create or find supplier after unique violation';
      END IF;
    WHEN OTHERS THEN
      RAISE EXCEPTION 'Failed to create supplier: %', SQLERRM;
  END;
END;
$$;

-- 6) Enhanced supplier suggestions function
CREATE OR REPLACE FUNCTION public.get_supplier_suggestions(
  p_business_id text,
  p_search_term text DEFAULT ''
) RETURNS TABLE (
  id bigint,
  name text
)
LANGUAGE plpgsql
AS $$
BEGIN
  -- Validate business_id
  IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
    RAISE EXCEPTION 'Business ID is required';
  END IF;
  
  -- Return suppliers matching search term
  RETURN QUERY
  SELECT s.id, s.name
  FROM public.suppliers s
  WHERE s.business_id = p_business_id
    AND (p_search_term = '' OR LOWER(s.name) LIKE '%' || LOWER(trim(p_search_term)) || '%')
  ORDER BY s.name
  LIMIT 20;
END;
$$;

-- 7) Safe salary entry function
CREATE OR REPLACE FUNCTION public.safe_add_salary(
  p_business_id text,
  p_salary_date date,
  p_amount numeric
) RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
  v_salary_id bigint;
BEGIN
  -- Validate inputs
  IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
    RAISE EXCEPTION 'Business ID is required';
  END IF;
  
  IF p_salary_date IS NULL THEN
    RAISE EXCEPTION 'Salary date is required';
  END IF;
  
  IF p_amount IS NULL OR p_amount <= 0 THEN
    RAISE EXCEPTION 'Salary amount must be greater than 0';
  END IF;
  
  -- Insert salary entry
  INSERT INTO public.salaries (business_id, salary_date, amount)
  VALUES (p_business_id, p_salary_date, p_amount)
  RETURNING id INTO v_salary_id;
  
  RETURN v_salary_id;
EXCEPTION
  WHEN OTHERS THEN
    RAISE EXCEPTION 'Failed to add salary: %', SQLERRM;
END;
$$;

-- 8) Safe load entry function
CREATE OR REPLACE FUNCTION public.safe_add_load_entry(
  p_business_id text,
  p_entry_date date,
  p_no_of_boxes integer,
  p_quantity_with_box numeric,
  p_no_of_boxes_after integer,
  p_quantity_after_box numeric,
  p_product_id bigint DEFAULT NULL,
  p_supplier_id bigint DEFAULT NULL
) RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
  v_entry_id bigint;
BEGIN
  -- Validate inputs
  IF p_business_id IS NULL OR trim(p_business_id) = '' THEN
    RAISE EXCEPTION 'Business ID is required';
  END IF;
  
  IF p_entry_date IS NULL THEN
    RAISE EXCEPTION 'Entry date is required';
  END IF;
  
  IF p_no_of_boxes IS NULL OR p_no_of_boxes < 0 THEN
    RAISE EXCEPTION 'Number of boxes must be non-negative';
  END IF;
  
  IF p_quantity_with_box IS NULL OR p_quantity_with_box < 0 THEN
    RAISE EXCEPTION 'Quantity with box must be non-negative';
  END IF;
  
  IF p_no_of_boxes_after IS NULL OR p_no_of_boxes_after < 0 THEN
    RAISE EXCEPTION 'Number of boxes after must be non-negative';
  END IF;
  
  IF p_quantity_after_box IS NULL OR p_quantity_after_box < 0 THEN
    RAISE EXCEPTION 'Quantity after box must be non-negative';
  END IF;
  
  -- Insert load entry
  INSERT INTO public.load_entries (
    business_id, entry_date, no_of_boxes, quantity_with_box,
    no_of_boxes_after, quantity_after_box, product_id, supplier_id
  )
  VALUES (
    p_business_id, p_entry_date, p_no_of_boxes, p_quantity_with_box,
    p_no_of_boxes_after, p_quantity_after_box, p_product_id, p_supplier_id
  )
  RETURNING id INTO v_entry_id;
  
  RETURN v_entry_id;
EXCEPTION
  WHEN OTHERS THEN
    RAISE EXCEPTION 'Failed to add load entry: %', SQLERRM;
END;
$$;

-- 9) Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_suppliers_business_name ON public.suppliers (business_id, name);
CREATE INDEX IF NOT EXISTS idx_salaries_business_date ON public.salaries (business_id, salary_date);
CREATE INDEX IF NOT EXISTS idx_load_entries_business_date ON public.load_entries (business_id, entry_date);
CREATE INDEX IF NOT EXISTS idx_load_entries_product ON public.load_entries (product_id);
CREATE INDEX IF NOT EXISTS idx_load_entries_supplier ON public.load_entries (supplier_id);

-- 10) Add update triggers
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;

-- Apply update triggers
DROP TRIGGER IF EXISTS trg_suppliers_updated_at ON public.suppliers;
CREATE TRIGGER trg_suppliers_updated_at
  BEFORE UPDATE ON public.suppliers
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_salaries_updated_at ON public.salaries;
CREATE TRIGGER trg_salaries_updated_at
  BEFORE UPDATE ON public.salaries
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS trg_load_entries_updated_at ON public.load_entries;
CREATE TRIGGER trg_load_entries_updated_at
  BEFORE UPDATE ON public.load_entries
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- 11) Enable RLS and create basic policies
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.salaries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.load_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventory ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies (adjust based on your auth setup)
DO $$ BEGIN
  -- Suppliers policies
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_select_policy') THEN
    CREATE POLICY suppliers_select_policy ON public.suppliers FOR SELECT USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_insert_policy') THEN
    CREATE POLICY suppliers_insert_policy ON public.suppliers FOR INSERT WITH CHECK (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_update_policy') THEN
    CREATE POLICY suppliers_update_policy ON public.suppliers FOR UPDATE USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'suppliers' AND policyname = 'suppliers_delete_policy') THEN
    CREATE POLICY suppliers_delete_policy ON public.suppliers FOR DELETE USING (true);
  END IF;
  
  -- Salaries policies
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_select_policy') THEN
    CREATE POLICY salaries_select_policy ON public.salaries FOR SELECT USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_insert_policy') THEN
    CREATE POLICY salaries_insert_policy ON public.salaries FOR INSERT WITH CHECK (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_update_policy') THEN
    CREATE POLICY salaries_update_policy ON public.salaries FOR UPDATE USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'salaries' AND policyname = 'salaries_delete_policy') THEN
    CREATE POLICY salaries_delete_policy ON public.salaries FOR DELETE USING (true);
  END IF;
  
  -- Load entries policies
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_select_policy') THEN
    CREATE POLICY load_entries_select_policy ON public.load_entries FOR SELECT USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_insert_policy') THEN
    CREATE POLICY load_entries_insert_policy ON public.load_entries FOR INSERT WITH CHECK (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_update_policy') THEN
    CREATE POLICY load_entries_update_policy ON public.load_entries FOR UPDATE USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'load_entries' AND policyname = 'load_entries_delete_policy') THEN
    CREATE POLICY load_entries_delete_policy ON public.load_entries FOR DELETE USING (true);
  END IF;
  
  -- Inventory policies
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_select_policy') THEN
    CREATE POLICY inventory_select_policy ON public.inventory FOR SELECT USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_insert_policy') THEN
    CREATE POLICY inventory_insert_policy ON public.inventory FOR INSERT WITH CHECK (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_update_policy') THEN
    CREATE POLICY inventory_update_policy ON public.inventory FOR UPDATE USING (true);
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'inventory' AND policyname = 'inventory_delete_policy') THEN
    CREATE POLICY inventory_delete_policy ON public.inventory FOR DELETE USING (true);
  END IF;
END $$;
