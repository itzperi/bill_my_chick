-- FIX FOR SUPPLIERS TABLE ERROR
-- This will create the suppliers table that's missing

-- Step 1: Create the suppliers table
CREATE TABLE IF NOT EXISTS public.suppliers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_id text NOT NULL,
    name text NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    CONSTRAINT suppliers_name_not_empty CHECK (length(trim(name)) > 0),
    CONSTRAINT suppliers_business_id_not_empty CHECK (length(trim(business_id)) > 0),
    UNIQUE (business_id, name)
);

-- Step 2: Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_suppliers_business_name ON public.suppliers (business_id, name);

-- Step 3: Enable Row Level Security
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;

-- Step 4: Create RLS policies
DROP POLICY IF EXISTS suppliers_select_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_insert_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_update_policy ON public.suppliers;
DROP POLICY IF EXISTS suppliers_delete_policy ON public.suppliers;

CREATE POLICY suppliers_select_policy ON public.suppliers FOR SELECT USING (true);
CREATE POLICY suppliers_insert_policy ON public.suppliers FOR INSERT WITH CHECK (true);
CREATE POLICY suppliers_update_policy ON public.suppliers FOR UPDATE USING (true);
CREATE POLICY suppliers_delete_policy ON public.suppliers FOR DELETE USING (true);

-- Step 5: Grant permissions
GRANT ALL ON public.suppliers TO anon;
GRANT ALL ON public.suppliers TO authenticated;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO anon;
GRANT USAGE ON SEQUENCE public.suppliers_id_seq TO authenticated;

-- Step 6: Create update trigger
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

CREATE TRIGGER trg_suppliers_updated_at
    BEFORE UPDATE ON public.suppliers
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- Step 7: Insert test data
INSERT INTO public.suppliers (business_id, name) 
VALUES 
    ('santhosh1', 'Local Supplier 1'),
    ('santhosh1', 'Local Supplier 2'),
    ('vasan', 'Local Supplier 1'),
    ('vasan', 'Local Supplier 2')
ON CONFLICT DO NOTHING;

-- Step 8: Verify the table exists
SELECT 'SUPPLIERS TABLE CREATED SUCCESSFULLY' as status;
SELECT COUNT(*) as total_suppliers FROM public.suppliers;
SELECT * FROM public.suppliers LIMIT 5;
